#!/usr/bin/env python3
"""
Example usage of OData MCP with cookie authentication.

This example demonstrates how to use the OData MCP wrapper with different
authentication methods including the new cookie authentication support.
"""

import os
import subprocess
import sys
from pathlib import Path

def print_header(title):
    """Print a formatted header."""
    print("\n" + "=" * 80)
    print(f" {title}")
    print("=" * 80)

def run_command(cmd, description):
    """Run a command and print its description."""
    print(f"\n>>> {description}")
    print(f"$ {cmd}")
    print("-" * 80)
    
    # For demonstration, we'll just print what would happen
    # In real usage, you would run: subprocess.run(cmd, shell=True)
    print("(Command would be executed here)")

def main():
    """Demonstrate different authentication methods."""
    
    print_header("OData MCP Cookie Authentication Examples")
    
    # Example service URL
    service_url = "https://sapdev15.redmond.corp.microsoft.com:8422/sap/opu/odata/sap/ZSCR_105_RTS_OD_SRV/"
    
    print("\nThe OData MCP wrapper now supports three authentication methods:")
    print("1. Basic Authentication (username/password)")
    print("2. Cookie File Authentication")
    print("3. Cookie String Authentication")
    
    # Example 1: Basic Authentication
    print_header("Example 1: Basic Authentication")
    run_command(
        f"python odata_mcp.py --service {service_url} --user myuser --password mypass",
        "Using basic authentication with username and password"
    )
    
    # Example 2: Cookie File Authentication
    print_header("Example 2: Cookie File Authentication")
    print("\nFirst, ensure you have a cookie file (e.g., cookie.txt) in Netscape format.")
    print("You can export cookies from your browser using extensions like Cookie-Editor.")
    
    run_command(
        f"python odata_mcp.py --service {service_url} --cookie-file cookie.txt",
        "Using cookie file authentication"
    )
    
    # Example 3: Cookie String Authentication
    print_header("Example 3: Cookie String Authentication")
    print("\nYou can also provide cookies directly as a string.")
    
    cookie_string = "SAP_SESSIONID=abc123; MYSAPSSO2=xyz789"
    run_command(
        f'python odata_mcp.py --service {service_url} --cookie-string "{cookie_string}"',
        "Using cookie string authentication"
    )
    
    # Example 4: Environment Variables
    print_header("Example 4: Using Environment Variables")
    print("\nYou can also set authentication via environment variables:")
    print()
    print("For basic auth:")
    print("  export ODATA_URL='https://example.com/odata/'")
    print("  export ODATA_USER='myuser'")
    print("  export ODATA_PASS='mypass'")
    print()
    print("For cookie file:")
    print("  export ODATA_URL='https://example.com/odata/'")
    print("  export ODATA_COOKIE_FILE='/path/to/cookie.txt'")
    print()
    print("For cookie string:")
    print("  export ODATA_URL='https://example.com/odata/'")
    print("  export ODATA_COOKIE_STRING='session=abc123; token=xyz789'")
    print()
    print("Then run:")
    print("  python odata_mcp.py")
    
    # Example 5: Testing Cookie Authentication
    print_header("Example 5: Testing Cookie Authentication")
    print("\nTo test if your cookies work with the OData service:")
    
    run_command(
        "python test_cookie_auth.py cookie.txt",
        "Test cookie authentication with the OData service"
    )
    
    print("\nThis will:")
    print("- Load cookies from the file")
    print("- Make a test request to the OData service")
    print("- Show the response status and headers")
    print("- Indicate if the authentication was successful")
    
    # Cookie File Format
    print_header("Cookie File Format")
    print("\nThe cookie file should be in Netscape format (as exported by browsers):")
    print()
    print("# Netscape HTTP Cookie File")
    print("# This file was generated by Cookie-Editor")
    print(".example.com\tTRUE\t/\tFALSE\t1234567890\tsession\tabc123def456")
    print(".example.com\tTRUE\t/\tTRUE\t1234567890\tauth_token\txyz789uvw321")
    print()
    print("Or simple key=value format:")
    print()
    print("session=abc123def456")
    print("auth_token=xyz789uvw321")
    
    # Important Notes
    print_header("Important Notes")
    print("\n1. Cookie authentication is useful for:")
    print("   - Services that use SSO (Single Sign-On)")
    print("   - Services with complex authentication flows")
    print("   - Testing with browser-obtained sessions")
    print()
    print("2. When using cookies:")
    print("   - SSL verification is automatically disabled for internal servers")
    print("   - Cookies are maintained throughout the session")
    print("   - Both SAP-specific cookies (MYSAPSSO2) and session cookies are supported")
    print()
    print("3. Security considerations:")
    print("   - Keep cookie files secure and don't commit them to version control")
    print("   - Use environment variables or secure storage for production")
    print("   - Cookies may expire, requiring periodic updates")
    
    print("\n" + "=" * 80)
    print("For more information, see the README.md file")
    print("=" * 80 + "\n")

if __name__ == "__main__":
    main()